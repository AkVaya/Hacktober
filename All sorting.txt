#include<bits/stdc++.h>
using namespace std;
int n,a[100000];
int partition ( int low, int high)  
{  
    int pivot = a[high];  
    int i = (low - 1);   
  
    for (int j = low; j <= high - 1; j++)  
    {  
        if (a[j] < pivot)  
        {  
            i++;   
            swap(a[i], a[j]);  
        }  
    }  
    swap(a[i + 1], a[high]);  
    return (i + 1);  
}  
void quicksort(int low, int high)  
{  
    if (low < high)  
    {  
        int pi = partition(low, high);    
        quicksort( low, pi - 1);  
        quicksort(pi + 1, high);  
    }  
}  


void heapify(int a[], int n, int i) 
{ 
    int largest = i; 
    int l = 2*i + 1;  
    int r = 2*i + 2; 
  
    if (l < n && a[l] > a[largest]) 
        largest = l; 
  
    if (r < n && a[r] > a[largest]) 
        largest = r; 
  
    if (largest != i) 
    { 
        swap(a[i], a[largest]); 
  
        heapify(a, n, largest); 
    } 
} 
  
void heapsort() 
{ 
    for (int i = n / 2 - 1; i >= 0; i--) 
        heapify(a, n, i); 
  
    for (int i=n-1; i>=0; i--) 
    { 
        swap(a[0], a[i]); 
  
        heapify(a, i, 0); 
    } 
} 
void merge(int a[], int l, int m, int r) 
{ 
    int i, j, k; 
    int n1 = m - l + 1; 
    int n2 =  r - m; 
  
    int L[n1], R[n2]; 
  
      for (i = 0; i < n1; i++) 
        L[i] = a[l + i]; 
    for (j = 0; j < n2; j++) 
        R[j] = a[m + 1+ j]; 
  
    
    i = 0;     j = 0; 
    k = l; 
    while (i < n1 && j < n2) 
    { 
        if (L[i] <= R[j]) 
        { 
            a[k] = L[i]; 
            i++; 
        } 
        else
        { 
            a[k] = R[j]; 
            j++; 
        } 
        k++; 
    } 
  
   
    while (i < n1) 
    { 
        a[k] = L[i]; 
        i++; 
        k++; 
    } 
  
  
    while (j < n2) 
    { 
        a[k] = R[j]; 
        j++; 
        k++; 
    } 
} 
  

void mergesort(int l, int r) 
{ 
    if (l < r) 
    { 
        
        int m = l+(r-l)/2; 
  
        mergesort( l, m); 
        mergesort( m+1, r); 
  
        merge(a, l, m, r); 
    } 
} 


void insertion()  
{  
    int i, key, j;  
    for (i = 1; i < n; i++) 
    {  
        key = a[i];  
        j = i - 1;  
        while (j >= 0 && a[j] > key) 
        {  
            a[j + 1] = a[j];  
            j = j - 1;  
        }  
        a[j + 1] = key;  
    }  
}  
void bubblesort()  
{  
    int i, j;  
    for (i = 0; i < n-1; i++)      
      
    for (j = 0; j < n-i-1; j++)  
        if (a[j] > a[j+1])  
            swap(a[j], a[j+1]);  
}  
  

void print(){
    for(int i=0; i<n; i++) cout << a[i] << ' ';
}
int main(){
   cin >>n;
   int i;
   for(i=0; i<n; i++) cin >> a[i];
   
    // heapsort();
    //insertion();
    // quicksort(0,n-1);
    // mergesort(0,n-1);
    // bubblesort();
print();


}